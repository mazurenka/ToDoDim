[{"D:\\programming\\ToDoListDimych\\todolist\\src\\app\\App.tsx":"1","D:\\programming\\ToDoListDimych\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx":"2","D:\\programming\\ToDoListDimych\\todolist\\src\\api\\todolists-api.ts":"3","D:\\programming\\ToDoListDimych\\todolist\\src\\index.tsx":"4","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"5"},{"size":898,"mtime":1641293568767,"results":"6","hashOfConfig":"7"},{"size":952,"mtime":1641293568834,"results":"8","hashOfConfig":"7"},{"size":2582,"mtime":1641294322805,"results":"9","hashOfConfig":"7"},{"size":643,"mtime":1641293568642,"results":"10","hashOfConfig":"7"},{"size":1773,"mtime":1641293568960,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gxrur4",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"D:\\programming\\ToDoListDimych\\todolist\\src\\app\\App.tsx",[],"D:\\programming\\ToDoListDimych\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\programming\\ToDoListDimych\\todolist\\src\\api\\todolists-api.ts",[],"D:\\programming\\ToDoListDimych\\todolist\\src\\index.tsx",[],["24","25"],"D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["26","27","28"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":15,"column":97,"nodeType":"35","endLine":15,"endColumn":130,"suggestions":"36"},{"ruleId":"33","severity":1,"message":"34","line":20,"column":8,"nodeType":"35","endLine":20,"endColumn":41,"suggestions":"37"},{"ruleId":"33","severity":1,"message":"34","line":24,"column":8,"nodeType":"35","endLine":24,"endColumn":41,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["41"],["42"],["43"],"no-global-assign","no-unsafe-negation",{"desc":"44","fix":"45"},{"desc":"44","fix":"46"},{"desc":"44","fix":"47"},"Update the dependencies array to be: [props]",{"range":"48","text":"49"},{"range":"50","text":"49"},{"range":"51","text":"49"},[765,798],"[props]",[1071,1104],[1261,1294]]