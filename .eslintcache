[{"D:\\programming\\ToDoListDimych\\todolist\\src\\app\\App.tsx":"1","D:\\programming\\ToDoListDimych\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx":"2","D:\\programming\\ToDoListDimych\\todolist\\src\\api\\todolists-api.ts":"3","D:\\programming\\ToDoListDimych\\todolist\\src\\index.tsx":"4","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"5","D:\\programming\\ToDoListDimych\\todolist\\src\\app\\app-reducer.ts":"6","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"7","D:\\programming\\ToDoListDimych\\todolist\\src\\components\\AddItemForm\\AddItemForm.tsx":"8","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\TodolistsList.tsx":"9","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\todolists-reducer.ts":"10","D:\\programming\\ToDoListDimych\\todolist\\src\\reportWebVitals.ts":"11","D:\\programming\\ToDoListDimych\\todolist\\src\\utils\\error-utils.ts":"12","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\Login\\Login.tsx":"13","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\Login\\login-reducer.ts":"14"},{"size":1787,"mtime":1641483029178,"results":"15","hashOfConfig":"16"},{"size":952,"mtime":1641293568834,"results":"17","hashOfConfig":"16"},{"size":2870,"mtime":1641490578018,"results":"18","hashOfConfig":"16"},{"size":643,"mtime":1641376917191,"results":"19","hashOfConfig":"16"},{"size":1773,"mtime":1641293568960,"results":"20","hashOfConfig":"16"},{"size":1050,"mtime":1641321505817,"results":"21","hashOfConfig":"16"},{"size":4193,"mtime":1641376917534,"results":"22","hashOfConfig":"16"},{"size":1595,"mtime":1641376917378,"results":"23","hashOfConfig":"16"},{"size":3808,"mtime":1641375708136,"results":"24","hashOfConfig":"16"},{"size":3356,"mtime":1641376669770,"results":"25","hashOfConfig":"16"},{"size":425,"mtime":1641376917237,"results":"26","hashOfConfig":"16"},{"size":811,"mtime":1641376917581,"results":"27","hashOfConfig":"16"},{"size":2843,"mtime":1641490354351,"results":"28","hashOfConfig":"16"},{"size":1438,"mtime":1641490145540,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gxrur4",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},"D:\\programming\\ToDoListDimych\\todolist\\src\\app\\App.tsx",[],"D:\\programming\\ToDoListDimych\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\programming\\ToDoListDimych\\todolist\\src\\api\\todolists-api.ts",[],"D:\\programming\\ToDoListDimych\\todolist\\src\\index.tsx",[],["64","65"],"D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["66","67","68"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n",["69","70"],"D:\\programming\\ToDoListDimych\\todolist\\src\\app\\app-reducer.ts",["71"],"D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["72","73","74","75","76","77"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\programming\\ToDoListDimych\\todolist\\src\\components\\AddItemForm\\AddItemForm.tsx",["78","79","80"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\TodolistsList.tsx",["81","82","83","84","85","86","87","88"],"D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\todolists-reducer.ts",["89"],"D:\\programming\\ToDoListDimych\\todolist\\src\\reportWebVitals.ts",[],"D:\\programming\\ToDoListDimych\\todolist\\src\\utils\\error-utils.ts",[],"D:\\programming\\ToDoListDimych\\todolist\\src\\features\\Login\\Login.tsx",["90"],"D:\\programming\\ToDoListDimych\\todolist\\src\\features\\Login\\login-reducer.ts",["91","92"],"import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {TasksStateType} from \"../TodolistsList/tasks-reducer\";\r\nimport {loginAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {}\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n// export const removeTaskAC = (taskId: string, todolistId: string) =>\r\n//     ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    loginAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                alert('Yo')\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerAppError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\n\r\ntype ActionsType = any\r\n\r\ntype InitialStateType = {}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n",{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":15,"column":97,"nodeType":"99","endLine":15,"endColumn":130,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"98","line":20,"column":8,"nodeType":"99","endLine":20,"endColumn":41,"suggestions":"101"},{"ruleId":"97","severity":1,"message":"98","line":24,"column":8,"nodeType":"99","endLine":24,"endColumn":41,"suggestions":"102"},{"ruleId":"93","replacedBy":"103"},{"ruleId":"95","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":1,"column":7,"nodeType":"107","messageId":"108","endLine":1,"endColumn":37},{"ruleId":"97","severity":1,"message":"109","line":35,"column":8,"nodeType":"99","endLine":35,"endColumn":10,"suggestions":"110"},{"ruleId":"97","severity":1,"message":"98","line":39,"column":8,"nodeType":"99","endLine":39,"endColumn":42,"suggestions":"111"},{"ruleId":"97","severity":1,"message":"98","line":46,"column":8,"nodeType":"99","endLine":46,"endColumn":54,"suggestions":"112"},{"ruleId":"97","severity":1,"message":"98","line":48,"column":95,"nodeType":"99","endLine":48,"endColumn":134,"suggestions":"113"},{"ruleId":"97","severity":1,"message":"98","line":49,"column":101,"nodeType":"99","endLine":49,"endColumn":140,"suggestions":"114"},{"ruleId":"97","severity":1,"message":"98","line":50,"column":107,"nodeType":"99","endLine":50,"endColumn":146,"suggestions":"115"},{"ruleId":"105","severity":1,"message":"116","line":2,"column":9,"nodeType":"107","messageId":"108","endLine":2,"endColumn":12},{"ruleId":"105","severity":1,"message":"117","line":2,"column":14,"nodeType":"107","messageId":"108","endLine":2,"endColumn":20},{"ruleId":"105","severity":1,"message":"118","line":2,"column":22,"nodeType":"107","messageId":"108","endLine":2,"endColumn":33},{"ruleId":"97","severity":1,"message":"119","line":35,"column":8,"nodeType":"99","endLine":35,"endColumn":10,"suggestions":"120"},{"ruleId":"97","severity":1,"message":"121","line":40,"column":8,"nodeType":"99","endLine":40,"endColumn":10,"suggestions":"122"},{"ruleId":"97","severity":1,"message":"121","line":45,"column":8,"nodeType":"99","endLine":45,"endColumn":10,"suggestions":"123"},{"ruleId":"97","severity":1,"message":"121","line":50,"column":8,"nodeType":"99","endLine":50,"endColumn":10,"suggestions":"124"},{"ruleId":"97","severity":1,"message":"121","line":55,"column":8,"nodeType":"99","endLine":55,"endColumn":10,"suggestions":"125"},{"ruleId":"97","severity":1,"message":"121","line":60,"column":8,"nodeType":"99","endLine":60,"endColumn":10,"suggestions":"126"},{"ruleId":"97","severity":1,"message":"121","line":65,"column":8,"nodeType":"99","endLine":65,"endColumn":10,"suggestions":"127"},{"ruleId":"97","severity":1,"message":"121","line":70,"column":8,"nodeType":"99","endLine":70,"endColumn":10,"suggestions":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"129","line":28,"column":13},{"ruleId":"130","severity":1,"message":"131","line":42,"column":32,"nodeType":"132","endLine":42,"endColumn":49},{"ruleId":"105","severity":1,"message":"133","line":3,"column":9,"nodeType":"107","messageId":"108","endLine":3,"endColumn":23},{"ruleId":"105","severity":1,"message":"134","line":46,"column":6,"nodeType":"107","messageId":"108","endLine":46,"endColumn":19},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["137"],["138"],["139"],["135"],["136"],"@typescript-eslint/no-unused-vars","'initialState' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["140"],["141"],["142"],["143"],["144"],["145"],"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has missing dependencies: 'demo' and 'dispatch'. Either include them or remove the dependency array.",["146"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["147"],["148"],["149"],["150"],["151"],["152"],["153"],"Parsing error: ':' expected.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'TasksStateType' is defined but never used.","'ThunkDispatch' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"154","fix":"156"},{"desc":"154","fix":"157"},{"desc":"158","fix":"159"},{"desc":"154","fix":"160"},{"desc":"154","fix":"161"},{"desc":"154","fix":"162"},{"desc":"154","fix":"163"},{"desc":"154","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"167","fix":"169"},{"desc":"167","fix":"170"},{"desc":"167","fix":"171"},{"desc":"167","fix":"172"},{"desc":"167","fix":"173"},{"desc":"167","fix":"174"},"Update the dependencies array to be: [props]",{"range":"175","text":"176"},{"range":"177","text":"176"},{"range":"178","text":"176"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"179","text":"180"},{"range":"181","text":"176"},{"range":"182","text":"176"},{"range":"183","text":"176"},{"range":"184","text":"176"},{"range":"185","text":"176"},"Update the dependencies array to be: [demo, dispatch]",{"range":"186","text":"187"},"Update the dependencies array to be: [dispatch]",{"range":"188","text":"189"},{"range":"190","text":"189"},{"range":"191","text":"189"},{"range":"192","text":"189"},{"range":"193","text":"189"},{"range":"194","text":"189"},{"range":"195","text":"189"},[765,798],"[props]",[1071,1104],[1261,1294],[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],[1846,1892],[1991,2030],[2133,2172],[2281,2320],[1174,1176],"[demo, dispatch]",[1345,1347],"[dispatch]",[1516,1518],[1721,1723],[1934,1936],[2135,2137],[2282,2284],[2461,2463]]